services:
  postgres:
    image: postgres:15
    container_name: postgres
    env_file:
      - .env
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5  

  redis:
    image: redis:latest
    container_name: redis
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5      

  django:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: dev-stage
    container_name: django
    environment:
      - SERVICE_NAME=django
    volumes:
      - ./backend:/app
      - django_media:/app/media
      - django_static:/app/static
    env_file:
      - .env
    depends_on:
      - postgres
      - redis
    networks:
      - app-network

  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: dev-stage
    container_name: celery
    environment:
      - SERVICE_NAME=celery
    volumes:
      - ./backend:/app
    depends_on:
      - django
      - redis
    env_file:
      - .env
    networks:
      - app-network

  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: dev-stage
    container_name: celery-beat
    environment:
      - SERVICE_NAME=celery-beat
    volumes:
      - ./backend:/app
    depends_on:
      - django
      - redis
    env_file:
      - .env
    networks:
      - app-network

  flower:
    image: mher/flower
    container_name: flower
    command: celery flower --broker=redis://redis:6379/0
    ports:
      - "5555:5555"
    depends_on:
      - redis
      - celery
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: dev-stage
    container_name: frontend
    environment:
      - VITE_API_BASE_URL=/api
    volumes:
      - ./frontend:/app
      - /app/node_modules
    expose:
      - "3000"
    networks:
      - app-network

  nginx:
    image: nginx:stable-alpine
    container_name: nginx
    ports:
      - "8081:80"
    volumes:
      - ./nginx/nginx.dev.conf:/etc/nginx/conf.d/default.conf:ro
      - django_media:/app/media:ro
      - django_static:/app/static:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - django
      - frontend
    networks:
      - app-network

  nginx-exporter:
    image: nginx/nginx-prometheus-exporter
    container_name: nginx-exporter
    command: -nginx.scrape-uri=http://nginx:80/stub_status
    depends_on:
      - nginx
    ports:
      - "9113:9113"
    networks:
      - app-network

  node-exporter:
    image: prom/node-exporter
    container_name: node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    networks:
      - app-network

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    networks:
      - app-network

  grafana:
    image: grafana/grafana
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  django_media:
  django_static:
  prometheus_data:
  grafana_data:
  redis_data: 